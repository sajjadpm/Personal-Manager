// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

namespace PM.Classes
{
    public partial class Logindetails
    {
        private static ILogindetailsPersister _DefaultPersister;
        private ILogindetailsPersister _Persister;
        private int _ID;
        private string _Name;
        private string _Emailaddress;
        private string _Password;
        private DateTime _createdon;

        static Logindetails()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerLogindetailsPersister();
        }

        public Logindetails()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public Logindetails(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "ID":
                        this.ID = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "NAME":
                        this.Name = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "EMAILADDRESS":
                        this.Emailaddress = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PASSWORD":
                        this.Password = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "CREATEDON":
                        this.createdon = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        break;
                    
                }
            }
        }

        public static ILogindetailsPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ILogindetailsPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int ID
        {
            get { return _ID; }
            set { _ID = value; }
        }

        public string Name
        {
            get { return _Name; }
            set { _Name = value; }
        }

        public string Emailaddress
        {
            get { return _Emailaddress; }
            set { _Emailaddress = value; }
        }

        public string Password
        {
            get { return _Password; }
            set { _Password = value; }
        }

        public DateTime createdon
        {
            get { return _createdon; }
            set { _createdon = value; }
        }

        public virtual void Clone(Logindetails sourceObject)
        {
            if(sourceObject == null)
            {
                throw new ArgumentNullException("sourceObject"); 
            }
            
            // Clone attributes from source object
            this._ID = sourceObject.ID; 
            this._Name = sourceObject.Name; 
            this._Emailaddress = sourceObject.Emailaddress; 
            this._Password = sourceObject.Password; 
            this._createdon = sourceObject.createdon; 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<Logindetails> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface ILogindetailsPersister 
    {
        int Insert(Logindetails logindetails);
        IReader<Logindetails> ListAll();
    }
    
    public partial class SqlServerLogindetailsPersister : SqlPersisterBase, ILogindetailsPersister
    {
        public SqlServerLogindetailsPersister()
        {
        }

        public SqlServerLogindetailsPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerLogindetailsPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerLogindetailsPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Insert(Logindetails logindetails)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("LogindetailsInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vID = new SqlParameter("@ID", SqlDbType.Int);
                vID.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vID);
                SqlParameter vName = new SqlParameter("@Name", SqlDbType.NVarChar, 50);
                vName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vName);
                SqlParameter vEmailaddress = new SqlParameter("@Emailaddress", SqlDbType.NVarChar, 50);
                vEmailaddress.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vEmailaddress);
                SqlParameter vPassword = new SqlParameter("@Password", SqlDbType.NVarChar, 50);
                vPassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPassword);
                SqlParameter vcreatedon = new SqlParameter("@createdon", SqlDbType.DateTime);
                vcreatedon.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vcreatedon);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vID, 
                    logindetails.ID, 
                    0);
                SqlServerHelper.SetParameterValue(vName, logindetails.Name);
                SqlServerHelper.SetParameterValue(vEmailaddress, logindetails.Emailaddress);
                SqlServerHelper.SetParameterValue(vPassword, logindetails.Password);
                SqlServerHelper.SetParameterValue(vcreatedon, logindetails.createdon);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    logindetails.ID = SqlServerHelper.ToInt32(vID); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<Logindetails> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("LogindetailsListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerLogindetailsReader(reader); 
            }
        }

    }

    public partial class SqlServerLogindetailsReader : IReader<Logindetails>
    {
        private SqlDataReader sqlDataReader;

        private Logindetails _Logindetails;

        private int _IDOrdinal = -1;
        private int _NameOrdinal = -1;
        private int _EmailaddressOrdinal = -1;
        private int _PasswordOrdinal = -1;
        private int _createdonOrdinal = -1;

        public SqlServerLogindetailsReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "ID":
                        _IDOrdinal = i; 
                        break;
                    
                    case "NAME":
                        _NameOrdinal = i; 
                        break;
                    
                    case "EMAILADDRESS":
                        _EmailaddressOrdinal = i; 
                        break;
                    
                    case "PASSWORD":
                        _PasswordOrdinal = i; 
                        break;
                    
                    case "CREATEDON":
                        _createdonOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<Logindetails> Implementation
        
        public bool Read()
        {
            _Logindetails = null; 
            return this.sqlDataReader.Read(); 
        }

        public Logindetails Current
        {
            get
            {
                if(_Logindetails == null)
                {
                    _Logindetails = new Logindetails();
                    if(_IDOrdinal != -1)
                    {
                        _Logindetails.ID = SqlServerHelper.ToInt32(sqlDataReader, _IDOrdinal); 
                    }
                    _Logindetails.Name = SqlServerHelper.ToString(sqlDataReader, _NameOrdinal); 
                    _Logindetails.Emailaddress = SqlServerHelper.ToString(sqlDataReader, _EmailaddressOrdinal); 
                    _Logindetails.Password = SqlServerHelper.ToString(sqlDataReader, _PasswordOrdinal); 
                    if(_createdonOrdinal != -1)
                    {
                        _Logindetails.createdon = SqlServerHelper.ToDateTime(sqlDataReader, _createdonOrdinal); 
                    }
                }
                

                return _Logindetails; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<Logindetails> ToList()
        {
            List<Logindetails> list = new List<Logindetails>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion

        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<Logindetails> Implementation
        
        public IEnumerator<Logindetails> GetEnumerator()
        {
            return new LogindetailsEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new LogindetailsEnumerator(this); 
        }

        #endregion
        
        private partial class LogindetailsEnumerator : IEnumerator<Logindetails>
        {
            private IReader<Logindetails> logindetailsReader;

            public LogindetailsEnumerator(IReader<Logindetails> logindetailsReader)
            {
                this.logindetailsReader = logindetailsReader; 
            }

            #region IEnumerator<Logindetails> Members
            
            public Logindetails Current
            {
                get { return this.logindetailsReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.logindetailsReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.logindetailsReader.Current; }
            }

            public bool MoveNext()
            {
                return this.logindetailsReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of logindetails reader is not supported."); 
            }

            #endregion
            
        }
    }
}
