// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

namespace PM.Classes
{
    public partial class Carddetails
    {
        private static ICarddetailsPersister _DefaultPersister;
        private ICarddetailsPersister _Persister;
        private string _Typeofcard;
        private string _Cardname;
        private string _Dateofexpiry;
        private string _Notificationmail;
        private string _Country;
        private int _id;

        static Carddetails()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerCarddetailsPersister();
        }

        public Carddetails()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public Carddetails(int _id)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._id = _id; 

            // Call associated retrieve method
            Retrieve();
        }

        public Carddetails(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "TYPEOFCARD":
                        this.Typeofcard = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "CARDNAME":
                        this.Cardname = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "DATEOFEXPIRY":
                        this.Dateofexpiry = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "NOTIFICATIONMAIL":
                        this.Notificationmail = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "COUNTRY":
                        this.Country = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "ID":
                        this.id = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                }
            }
        }

        public static ICarddetailsPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ICarddetailsPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public string Typeofcard
        {
            get { return _Typeofcard; }
            set { _Typeofcard = value; }
        }

        public string Cardname
        {
            get { return _Cardname; }
            set { _Cardname = value; }
        }

        public string Dateofexpiry
        {
            get { return _Dateofexpiry; }
            set { _Dateofexpiry = value; }
        }

        public string Notificationmail
        {
            get { return _Notificationmail; }
            set { _Notificationmail = value; }
        }

        public string Country
        {
            get { return _Country; }
            set { _Country = value; }
        }

        public int id
        {
            get { return _id; }
            set { _id = value; }
        }

        public virtual void Clone(Carddetails sourceObject)
        {
            if(sourceObject == null)
            {
                throw new ArgumentNullException("sourceObject"); 
            }
            
            // Clone attributes from source object
            this._Typeofcard = sourceObject.Typeofcard; 
            this._Cardname = sourceObject.Cardname; 
            this._Dateofexpiry = sourceObject.Dateofexpiry; 
            this._Notificationmail = sourceObject.Notificationmail; 
            this._Country = sourceObject.Country; 
            this._id = sourceObject.id; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<Carddetails> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface ICarddetailsPersister 
    {
        int Retrieve(Carddetails carddetails);
        int Update(Carddetails carddetails);
        int Delete(Carddetails carddetails);
        int Insert(Carddetails carddetails);
        IReader<Carddetails> ListAll();
    }
    
    public partial class SqlServerCarddetailsPersister : SqlPersisterBase, ICarddetailsPersister
    {
        public SqlServerCarddetailsPersister()
        {
        }

        public SqlServerCarddetailsPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerCarddetailsPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerCarddetailsPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(Carddetails carddetails)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CarddetailsGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vTypeofcard = new SqlParameter("@Typeofcard", SqlDbType.NVarChar, 20);
                    vTypeofcard.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vTypeofcard);
                    SqlParameter vCardname = new SqlParameter("@Cardname", SqlDbType.NVarChar, 50);
                    vCardname.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCardname);
                    SqlParameter vDateofexpiry = new SqlParameter("@Dateofexpiry", SqlDbType.NVarChar, 50);
                    vDateofexpiry.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vDateofexpiry);
                    SqlParameter vNotificationmail = new SqlParameter("@Notificationmail", SqlDbType.NVarChar, 50);
                    vNotificationmail.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vNotificationmail);
                    SqlParameter vCountry = new SqlParameter("@Country", SqlDbType.NVarChar, 20);
                    vCountry.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCountry);
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vid);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, carddetails.id);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        carddetails.Typeofcard = SqlServerHelper.ToString(vTypeofcard); 
                        carddetails.Cardname = SqlServerHelper.ToString(vCardname); 
                        carddetails.Dateofexpiry = SqlServerHelper.ToString(vDateofexpiry); 
                        carddetails.Notificationmail = SqlServerHelper.ToString(vNotificationmail); 
                        carddetails.Country = SqlServerHelper.ToString(vCountry); 
                        carddetails.id = SqlServerHelper.ToInt32(vid); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(Carddetails carddetails)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CarddetailsUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vTypeofcard = new SqlParameter("@Typeofcard", SqlDbType.NVarChar, 20);
                vTypeofcard.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vTypeofcard);
                SqlParameter vCardname = new SqlParameter("@Cardname", SqlDbType.NVarChar, 50);
                vCardname.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCardname);
                SqlParameter vDateofexpiry = new SqlParameter("@Dateofexpiry", SqlDbType.NVarChar, 50);
                vDateofexpiry.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDateofexpiry);
                SqlParameter vNotificationmail = new SqlParameter("@Notificationmail", SqlDbType.NVarChar, 50);
                vNotificationmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vNotificationmail);
                SqlParameter vCountry = new SqlParameter("@Country", SqlDbType.NVarChar, 20);
                vCountry.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCountry);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vTypeofcard, carddetails.Typeofcard);
                SqlServerHelper.SetParameterValue(vCardname, carddetails.Cardname);
                SqlServerHelper.SetParameterValue(vDateofexpiry, carddetails.Dateofexpiry);
                SqlServerHelper.SetParameterValue(vNotificationmail, carddetails.Notificationmail);
                SqlServerHelper.SetParameterValue(vCountry, carddetails.Country);
                SqlServerHelper.SetParameterValue(vid, carddetails.id);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(Carddetails carddetails)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CarddetailsDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vid);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, carddetails.id);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(Carddetails carddetails)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CarddetailsInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vTypeofcard = new SqlParameter("@Typeofcard", SqlDbType.NVarChar, 20);
                vTypeofcard.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vTypeofcard);
                SqlParameter vCardname = new SqlParameter("@Cardname", SqlDbType.NVarChar, 50);
                vCardname.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCardname);
                SqlParameter vDateofexpiry = new SqlParameter("@Dateofexpiry", SqlDbType.NVarChar, 50);
                vDateofexpiry.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDateofexpiry);
                SqlParameter vNotificationmail = new SqlParameter("@Notificationmail", SqlDbType.NVarChar, 50);
                vNotificationmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vNotificationmail);
                SqlParameter vCountry = new SqlParameter("@Country", SqlDbType.NVarChar, 20);
                vCountry.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCountry);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vid);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vTypeofcard, carddetails.Typeofcard);
                SqlServerHelper.SetParameterValue(vCardname, carddetails.Cardname);
                SqlServerHelper.SetParameterValue(vDateofexpiry, carddetails.Dateofexpiry);
                SqlServerHelper.SetParameterValue(vNotificationmail, carddetails.Notificationmail);
                SqlServerHelper.SetParameterValue(vCountry, carddetails.Country);
                SqlServerHelper.SetParameterValue(
                    vid, 
                    carddetails.id, 
                    0);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    carddetails.id = SqlServerHelper.ToInt32(vid); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<Carddetails> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("CarddetailsListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerCarddetailsReader(reader); 
            }
        }

    }

    public partial class SqlServerCarddetailsReader : IReader<Carddetails>
    {
        private SqlDataReader sqlDataReader;

        private Carddetails _Carddetails;

        private int _TypeofcardOrdinal = -1;
        private int _CardnameOrdinal = -1;
        private int _DateofexpiryOrdinal = -1;
        private int _NotificationmailOrdinal = -1;
        private int _CountryOrdinal = -1;
        private int _idOrdinal = -1;

        public SqlServerCarddetailsReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "TYPEOFCARD":
                        _TypeofcardOrdinal = i; 
                        break;
                    
                    case "CARDNAME":
                        _CardnameOrdinal = i; 
                        break;
                    
                    case "DATEOFEXPIRY":
                        _DateofexpiryOrdinal = i; 
                        break;
                    
                    case "NOTIFICATIONMAIL":
                        _NotificationmailOrdinal = i; 
                        break;
                    
                    case "COUNTRY":
                        _CountryOrdinal = i; 
                        break;
                    
                    case "ID":
                        _idOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<Carddetails> Implementation
        
        public bool Read()
        {
            _Carddetails = null; 
            return this.sqlDataReader.Read(); 
        }

        public Carddetails Current
        {
            get
            {
                if(_Carddetails == null)
                {
                    _Carddetails = new Carddetails();
                    _Carddetails.Typeofcard = SqlServerHelper.ToString(sqlDataReader, _TypeofcardOrdinal); 
                    _Carddetails.Cardname = SqlServerHelper.ToString(sqlDataReader, _CardnameOrdinal); 
                    _Carddetails.Dateofexpiry = SqlServerHelper.ToString(sqlDataReader, _DateofexpiryOrdinal); 
                    _Carddetails.Notificationmail = SqlServerHelper.ToString(sqlDataReader, _NotificationmailOrdinal); 
                    _Carddetails.Country = SqlServerHelper.ToString(sqlDataReader, _CountryOrdinal); 
                    if(_idOrdinal != -1)
                    {
                        _Carddetails.id = SqlServerHelper.ToInt32(sqlDataReader, _idOrdinal); 
                    }
                }
                

                return _Carddetails; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<Carddetails> ToList()
        {
            List<Carddetails> list = new List<Carddetails>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<Carddetails> Implementation
        
        public IEnumerator<Carddetails> GetEnumerator()
        {
            return new CarddetailsEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new CarddetailsEnumerator(this); 
        }

        #endregion
        
        private partial class CarddetailsEnumerator : IEnumerator<Carddetails>
        {
            private IReader<Carddetails> carddetailsReader;

            public CarddetailsEnumerator(IReader<Carddetails> carddetailsReader)
            {
                this.carddetailsReader = carddetailsReader; 
            }

            #region IEnumerator<Carddetails> Members
            
            public Carddetails Current
            {
                get { return this.carddetailsReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.carddetailsReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.carddetailsReader.Current; }
            }

            public bool MoveNext()
            {
                return this.carddetailsReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of carddetails reader is not supported."); 
            }

            #endregion
            
        }
    }
}
