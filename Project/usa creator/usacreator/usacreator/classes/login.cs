// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

namespace usacreator
{
    public partial class login
    {
        private static IloginPersister _DefaultPersister;
        private IloginPersister _Persister;
        private int _id;
        private string _name;
        private string _email;
        private string _password;

        static login()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerloginPersister();
        }

        public login()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public login(int _id)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._id = _id; 

            // Call associated retrieve method
            Retrieve();
        }

        public login(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "ID":
                        this.id = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "NAME":
                        this.name = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "EMAIL":
                        this.email = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "PASSWORD":
                        this.password = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                }
            }
        }

        public static IloginPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IloginPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int id
        {
            get { return _id; }
            set { _id = value; }
        }

        public string name
        {
            get { return _name; }
            set { _name = value; }
        }

        public string email
        {
            get { return _email; }
            set { _email = value; }
        }

        public string password
        {
            get { return _password; }
            set { _password = value; }
        }

        public virtual void Clone(login sourceObject)
        {
            if(sourceObject == null)
            {
                throw new ArgumentNullException("sourceObject"); 
            }
            
            // Clone attributes from source object
            this._id = sourceObject.id; 
            this._name = sourceObject.name; 
            this._email = sourceObject.email; 
            this._password = sourceObject.password; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<login> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface IloginPersister
    {
        int Retrieve(login login);
        int Update(login login);
        int Delete(login login);
        int Insert(login login);
        IReader<login> ListAll();
    }
    
    public partial class SqlServerloginPersister : SqlPersisterBase, IloginPersister
    {
        public SqlServerloginPersister()
        {
        }

        public SqlServerloginPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerloginPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerloginPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(login login)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("loginGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vname = new SqlParameter("@name", SqlDbType.NVarChar, 50);
                    vname.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vname);
                    SqlParameter vemail = new SqlParameter("@email", SqlDbType.NVarChar, 50);
                    vemail.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vemail);
                    SqlParameter vpassword = new SqlParameter("@password", SqlDbType.NVarChar, 25);
                    vpassword.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vpassword);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, login.id);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        login.id = SqlServerHelper.ToInt32(vid); 
                        login.name = SqlServerHelper.ToString(vname); 
                        login.email = SqlServerHelper.ToString(vemail); 
                        login.password = SqlServerHelper.ToString(vpassword); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(login login)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("loginUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vname = new SqlParameter("@name", SqlDbType.NVarChar, 50);
                vname.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vname);
                SqlParameter vemail = new SqlParameter("@email", SqlDbType.NVarChar, 50);
                vemail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vemail);
                SqlParameter vpassword = new SqlParameter("@password", SqlDbType.NVarChar, 25);
                vpassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vpassword);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vid, login.id);
                SqlServerHelper.SetParameterValue(vname, login.name);
                SqlServerHelper.SetParameterValue(vemail, login.email);
                SqlServerHelper.SetParameterValue(vpassword, login.password);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(login login)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("loginDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vid);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vid, login.id);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(login login)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("loginInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vname = new SqlParameter("@name", SqlDbType.NVarChar, 50);
                vname.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vname);
                SqlParameter vemail = new SqlParameter("@email", SqlDbType.NVarChar, 50);
                vemail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vemail);
                SqlParameter vpassword = new SqlParameter("@password", SqlDbType.NVarChar, 25);
                vpassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vpassword);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vid, 
                    login.id, 
                    0);
                SqlServerHelper.SetParameterValue(vname, login.name);
                SqlServerHelper.SetParameterValue(vemail, login.email);
                SqlServerHelper.SetParameterValue(vpassword, login.password);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    login.id = SqlServerHelper.ToInt32(vid); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<login> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("loginListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerloginReader(reader); 
            }
        }

    }

    public partial class SqlServerloginReader : IReader<login>
    {
        private SqlDataReader sqlDataReader;

        private login _login;

        private int _idOrdinal = -1;
        private int _nameOrdinal = -1;
        private int _emailOrdinal = -1;
        private int _passwordOrdinal = -1;

        public SqlServerloginReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "ID":
                        _idOrdinal = i; 
                        break;
                    
                    case "NAME":
                        _nameOrdinal = i; 
                        break;
                    
                    case "EMAIL":
                        _emailOrdinal = i; 
                        break;
                    
                    case "PASSWORD":
                        _passwordOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<login> Implementation
        
        public bool Read()
        {
            _login = null; 
            return this.sqlDataReader.Read(); 
        }

        public login Current
        {
            get
            {
                if(_login == null)
                {
                    _login = new login();
                    if(_idOrdinal != -1)
                    {
                        _login.id = SqlServerHelper.ToInt32(sqlDataReader, _idOrdinal); 
                    }
                    _login.name = SqlServerHelper.ToString(sqlDataReader, _nameOrdinal); 
                    _login.email = SqlServerHelper.ToString(sqlDataReader, _emailOrdinal); 
                    _login.password = SqlServerHelper.ToString(sqlDataReader, _passwordOrdinal); 
                }
                

                return _login; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<login> ToList()
        {
            List<login> list = new List<login>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<login> Implementation
        
        public IEnumerator<login> GetEnumerator()
        {
            return new loginEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new loginEnumerator(this); 
        }

        #endregion
        
        private partial class loginEnumerator : IEnumerator<login>
        {
            private IReader<login> loginReader;

            public loginEnumerator(IReader<login> loginReader)
            {
                this.loginReader = loginReader; 
            }

            #region IEnumerator<login> Members
            
            public login Current
            {
                get { return this.loginReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.loginReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.loginReader.Current; }
            }

            public bool MoveNext()
            {
                return this.loginReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of login reader is not supported."); 
            }

            #endregion
            
        }
    }
}